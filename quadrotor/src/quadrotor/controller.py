from control import lqr
import numpy as np

# -------------------------------------------------------------------------------------------------
def Correction2D(K):
	for i in range(len(K)):
		for j in range(len(K[0])):
			if abs(K[i][j]) < 1e-6:
				K[i][j] = 0
	return K

# -------------------------------------------------------------------------------------------------
def Correction(K):
	for i in range(len(K)):
		if abs(K[i]) <1e-3:
			K[i] = 0
	return K

# -------------------------------------------------------------------------------------------------
def hover(g, m, Ix, Iy, Iz):
	#Define State and Input Matrices:
	A = [[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\
         [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\
	     [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\
	     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\
	     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\
	     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\
	     [0,-g, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\
	     [g, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\
	     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\
	     [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\
	     [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\
	     [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]

	B = [[0   , 0   , 0   , 0   ],\
	     [0   , 0   , 0   , 0   ],\
	     [0   , 0   , 0   , 0   ],\
	     [0   , 1/Ix, 0   , 0   ],\
	     [0   , 0   , 1/Iy, 0   ],\
	     [0   , 0   , 0   , 1/Iz],\
	     [0   , 0   , 0   , 0   ],\
	     [0   , 0   , 0   , 0   ],\
	     [-1/m, 0   , 0   , 0   ],\
	     [0   , 0   , 0   , 0   ],\
	     [0   , 0   , 0   , 0   ],\
	     [0   , 0   , 0   , 0   ]]

	#Defining weight matrices Q and R for state and input matrices respectively:
	Q = [[5, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0],\
	     [0, 5, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0],\
	     [0, 0, 5, 0, 0, 0, 0, 0, 0,  0,  0,  0],\
	     [0, 0, 0, 1, 0, 0, 0, 0, 0,  0,  0,  0],\
	     [0, 0, 0, 0, 1, 0, 0, 0, 0,  0,  0,  0],\
	     [0, 0, 0, 0, 0, 1, 0, 0, 0,  0,  0,  0],\
	     [0, 0, 0, 0, 0, 0, 1, 0, 0,  0,  0,  0],\
	     [0, 0, 0, 0, 0, 0, 0, 1, 0,  0,  0,  0],\
	     [0, 0, 0, 0, 0, 0, 0, 0, 1,  0,  0,  0],\
	     [0, 0, 0, 0, 0, 0, 0, 0, 0, 10,  0,  0],\
	     [0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 10,  0],\
	     [0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 10]]

	R = [[100,  0,  0,  0],\
	     [ 0, 100,  0,  0],\
	     [ 0,  0, 100,  0],\
	     [ 0,  0,  0, 100]]

	#Calculating Matrix K gain with LQR method:
	k, S, E = lqr(A, B, Q, R)
	k = np.array(Correction2D(k))
	#Return these variables back to the control file.
	return k

# -------------------------------------------------------------------------------------------------
def cruise(g, m, Ix, Iy, Iz, Cd, u_max):
	K_cruise = np.zeros((10, 4, 9))
	for i in range(10):
		u = u_max*(i+1)/10
		theta = np.arcsin(-Cd*(u**2)/(m*g))
		w = u*np.tan(theta)

		#Define State and Input Matrices:
		A = [[              0,                0, 0, 1,  0,   np.tan(theta),         0, 0,        0],\
		     [              0,                0, 0, 0,  1,               0,         0, 0,        0],\
			 [              0,                0, 0, 0,  0, 1/np.cos(theta),         0, 0,        0],\
			 [              0,                0, 0, 0,  0,               0,         0, 0,        0],\
			 [              0,                0, 0, 0,  0,               0,         0, 0,        0],\
			 [              0,                0, 0, 0,  0,               0,         0, 0,        0],\
			 [              0, -g*np.cos(theta), 0, 0, -w,               0, -2*Cd*u/m, 0,        0],\
			 [g*np.cos(theta),                0, 0, w,  0,              -u,         0, 0,        0],\
			 [              0, -g*np.sin(theta), 0, 0,  u,               0,         0, 0, 2*Cd*w/m]]

		B = [[0   , 0   , 0   , 0   ],\
			 [0   , 0   , 0   , 0   ],\
			 [0   , 0   , 0   , 0   ],\
			 [0   , 1/Ix, 0   , 0   ],\
			 [0   , 0   , 1/Iy, 0   ],\
			 [0   , 0   , 0   , 1/Iz],\
			 [0   , 0   , 0   , 0   ],\
			 [0   , 0   , 0   , 0   ],\
			 [-1/m, 0   , 0   , 0   ]]

		#Defining weight matrices Q and R for state and input matrices respectively:
		Q = [[5, 0, 0, 0, 0, 0,  0, 0, 0],\
			 [0, 5, 0, 0, 0, 0,  0, 0, 0],\
			 [0, 0, 5, 0, 0, 0,  0, 0, 0],\
			 [0, 0, 0, 1, 0, 0,  0, 0, 0],\
			 [0, 0, 0, 0, 1, 0,  0, 0, 0],\
			 [0, 0, 0, 0, 0, 1,  0, 0, 0],\
			 [0, 0, 0, 0, 0, 0, 10, 0, 0],\
			 [0, 0, 0, 0, 0, 0,  0, 1, 0],\
			 [0, 0, 0, 0, 0, 0,  0, 0, 5]]

		R = [[1, 0,  0,  0],\
			 [ 0, 1, 0,  0],\
			 [ 0, 0, 1,  0],\
			 [ 0, 0,  0, 1]]

		#Calculating Matrix K gain with LQR method:
		K, S, E = lqr(A, B, Q, R)
		K_cruise[i] = np.array(Correction2D(K))

	K_cruise = K_cruise.tolist()
	#Return these variables back to the control file.
	return K_cruise

# -------------------------------------------------------------------------------------------------
def spin():
	return None
